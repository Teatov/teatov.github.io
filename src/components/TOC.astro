---
import type { MarkdownHeading } from 'astro';

interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props;
---

<nav class="lg:max-w-17">
  <h2 class="mb-1 readable:font-bold">Table of Contents</h2>
  <ul>
    {
      headings.map(heading => (
        <li class="text-grey-light odd:text-grey-medium ">
          <a
            aria-label={`Scroll to section: ${heading.text}`}
            href={`#${heading.slug}`}
            class="block outline-none hover:bg-grey-light hover:text-black focus-visible:bg-grey-light focus-visible:text-black"
          >
            {heading.text}
          </a>
        </li>
      ))
    }
  </ul>
</nav>

<script>
  const fnObserver = () => {
    function handleIntersection(
      entries: IntersectionObserverEntry[],
      observer: IntersectionObserver
    ) {
      entries.forEach(entry => {
        const index = document.querySelector(
          `aside a[href="#${entry.target.id}"]`
        );

        if (entry.isIntersecting) {
          index?.classList.add('bg-grey-dark');
        } else {
          index?.classList.remove('bg-grey-dark');
        }
      });
    }

    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');

    const options = {
      root: null,
      rootMargin: ' 15% 0px 0% 0px ',
      threshold: 1,
    };

    const observer = new IntersectionObserver(handleIntersection, options);

    headings.forEach(heading => {
      observer.observe(heading);
    });
  };
  fnObserver();
  document.addEventListener('astro:after-swap', fnObserver);
</script>
